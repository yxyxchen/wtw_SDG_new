modelName = "monte"
pars = c("phi", "tau", "gamma")
#  load libraries and set environments
options(warn=-1, message =-1) # default settings borrowed somewhere
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan') #load libraries
Sys.setenv(USE_CXX14=1) # making rstan working on this device
rstan_options(auto_write = TRUE) # default settings borrowed somewhere
options(mc.cores = parallel::detectCores())# enable multi-core precessors
library("loo")
# source scripts
source('subFxs/modelFittingFxs.R') # for fitting single case
source('subFxs/wtwSettings.R')
source('subFxs/loadFxs.R') # for load data
# compile the stan model
dir.create(sprintf("genData/expModelFitting/%s", modelName))
model = stan_model(file = sprintf("%s.stan", modelName))
dir.create("genData")
dir.create("genData/expModelFitting")
dir.create("genData/expModelFitting/monte")
dir.create("genData/expModelFitting/monteRatio")
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
trialData = trialData[(1 : length(trialData)) %in% allIDs]
timeWaitedList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$timeWaited[1 : (sum(tempt$blockNum == 1) - 1)]
})
trialEarningsList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$trialEarnings[1 : (sum(tempt$blockNum == 1) - 1)]
})
scheduledWaitList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$scheduledWait[1 : (sum(tempt$blockNum == 1) - 1)]
})
condList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = unique(tempt$condition)
})
wIniList = ifelse(condList == "HP", wInis[1], wInis[2])
timeWaitedList = sapply(1:n, function(sIdx){
ifelse(trialEarningsList[[sIdx]] > 0, scheduledWaitList[[sIdx]], timeWaitedList[[sIdx]])
})
pwd
getwd()
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
trialData = trialData[(1 : length(trialData)) %in% allIDs]
timeWaitedList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$timeWaited[1 : (sum(tempt$blockNum == 1) - 1)]
})
sIdx
trialData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
sIdx
bkIdx
list.files(path=dataDir, pattern=(sprintf('wtw_stress_SDG%d_bk%d_1.txt',thisID, bkIdx)))
dataDir
thisID
bkIdx
list.files(path=dataDir, pattern=(sprintf('wtw_stress_SDG%d_bk%d_1.txt',thisID, bkIdx)))
dataDir
sprintf('wtw_stress_SDG%d_bk%d_1.txt',thisID, bkIdx)
thisFile = list.files(path=dataDir, pattern=(sprintf('wtw_stress_SDG%d_bk%d_1.txt',thisID, bkIdx)))
thisFile
list.files(path=dataDir, pattern = "/.txt")
nSubjects
thisID
hdrData$ID
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)
trialData = trialData[(1 : length(trialData)) %in% allIDs]
timeWaitedList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$timeWaited[1 : (sum(tempt$blockNum == 1) - 1)]
})
trialEarningsList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$trialEarnings[1 : (sum(tempt$blockNum == 1) - 1)]
})
scheduledWaitList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$scheduledWait[1 : (sum(tempt$blockNum == 1) - 1)]
})
condList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = unique(tempt$condition)
})
wIniList = ifelse(condList == "HP", wInis[1], wInis[2])
timeWaitedList = sapply(1:n, function(sIdx){
ifelse(trialEarningsList[[sIdx]] > 0, scheduledWaitList[[sIdx]], timeWaitedList[[sIdx]])
})
for(sIdx in 1 : n){
wIni = wIniList[[sIdx]]
cond = condList[[sIdx]]
trialEarnings= trialEarningsList[[sIdx]]
timeWaited = timeWaitedList[[sIdx]]
fileName = sprintf("genData/expModelFitting/%s/s%d", modelName, sIdx)
modelFitting(cond, wIni, timeWaited, trialEarnings, fileName, pars, model)
}
rm(list = ls())
modelName = "monteRatio"
pars = c("phi", "tau", "gamma", "ratio")
#  load libraries and set environments
options(warn=-1, message =-1) # default settings borrowed somewhere
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan') #load libraries
Sys.setenv(USE_CXX14=1) # making rstan working on this device
rstan_options(auto_write = TRUE) # default settings borrowed somewhere
options(mc.cores = parallel::detectCores())# enable multi-core precessors
library("loo")
# source scripts
source('subFxs/modelFittingFxs.R') # for fitting single case
source('subFxs/wtwSettings.R')
source('subFxs/loadFxs.R') # for load data
# compile the stan model
dir.create(sprintf("genData/expModelFitting/%s", modelName))
model = stan_model(file = sprintf("%s.stan", modelName))
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
trialData = trialData[(1 : length(trialData)) %in% allIDs]
timeWaitedList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$timeWaited[1 : (sum(tempt$blockNum == 1) - 1)]
})
trialEarningsList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$trialEarnings[1 : (sum(tempt$blockNum == 1) - 1)]
})
scheduledWaitList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$scheduledWait[1 : (sum(tempt$blockNum == 1) - 1)]
})
condList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = unique(tempt$condition)
})
wIniList = ifelse(condList == "HP", wInis[1], wInis[2])
timeWaitedList = sapply(1:n, function(sIdx){
ifelse(trialEarningsList[[sIdx]] > 0, scheduledWaitList[[sIdx]], timeWaitedList[[sIdx]])
})
# loop over suvject
for(sIdx in 1 : n){
wIni = wIniList[[sIdx]]
cond = condList[[sIdx]]
trialEarnings= trialEarningsList[[sIdx]]
timeWaited = timeWaitedList[[sIdx]]
fileName = sprintf("genData/expModelFitting/%s/s%d", modelName, sIdx)
modelFitting(cond, wIni, timeWaited, trialEarnings, fileName, pars, model)
}
# this script extract waic for all models.
library("R.matlab")
n = 120
nModel = 2
modelNames = c("monte", "monteRatio")
waicList = matrix(NA, n, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
waic = vector(length = n)
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.RData", modelName, sIdx)
load(fileName)
waic[sIdx] = WAIC$waic
}
waicList[,m] = waic
}
f= "genData/expModelFitting/waicList.mat"
writeMat(f, waicList = waicList)
### output file ####
outFile = 'genData/simulation'
dir.create(outFile)
