realParas[,1] = rep(seq(0.01, 0.05, length.out = 5), nValue^(nPara - 1)) # phi
realParas[,2] = rep(rep(seq(0, 10, length.out = 5), each = nValue), nValue^(nPara - 2)) # tau
realParas[,3] = rep(seq(0.8, 0.98, length.out = 5), each = nValue^2)
dir.create("genData/simulation/monteCfd")
nRep = 5
simIdx = t(matrix(1 : (nComb * nRep), nRep, nComb))
save("realParas", "nComb", "nValue", "nPara", "paraNames", "nRep", "simIdx", file = "genData/simulation/monteCfd/realParas.RData")
# this script analysized the simulation data on the group level
modelName = "monte"
load(sprintf("genData/simulation/%s/realParas.RData", modelName)) # for nComb, paraNames, nPara
# generally loading
library("ggplot2")
library("dplyr")
library("tidyr")
source(file = './subFxs/plotThemes.R')
load("wtwSettings.RData")
# specific loading
library('scales')
source('subFxs/analysisFxs.R')
load(sprintf("genData/simulation/%s/trialHPData.RData", modelName)) # trialHPData
load(sprintf("genData/simulation/%s/trialLPData.RData", modelName)) # trialLPData
nRep = 5
# trial-level analysis
plotTrialwiseData = F
plotKMSC = F
plotWTW = F
# loop over conditions
for(cIdx in 1 : 2){
cond = conditions[cIdx]
if(cIdx == 1){
trialData = trialHPData
}else{
trialData = trialLPData
}
# generate arguments for later analysis
tMax = tMaxs[cIdx]
kmGrid = seq(0, tMax, by=0.1)
# initialize outputs
totalEarnings_ = matrix(0, nComb, nRep)
AUC_ = matrix(0, nComb, nRep)
# loop over combIdx
for(combIdx in 1 : nComb){
# loop over repetitions
for(rIdx in 1 : nRep){
# select data
thisTrialData = trialData[[simIdx[combIdx, rIdx]]]
realPara = realParas[combIdx,]
# generate arguments for later analysis
label = sprintf('%s %s', conditions[cIdx], paste0(paraNames, realPara, collapse = " "))
# summarise totalEarnings
totalEarnings_[combIdx, rIdx] =  sum(thisTrialData$trialEarnings)
# plot trial-by-trial data
if (plotTrialwiseData) {
trialPlots(thisTrialData,label)
}
# survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
AUC_[combIdx, rIdx] = kmscResults[['auc']]
# WTW time series
wtwCeiling = tMax
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
}# end of repetitions
}# end of para combinations
# organize and save blockData
AUC = rowSums(AUC_) / nRep
totalEarnings = rowSums(totalEarnings_) / nRep
blockData = data.frame(id = 1 : combIdx, blockNum = rep(1, nComb),
condition = factor(rep(cond, each = nComb), levels = c("HP", "LP")),
AUC = AUC,
totalEarnings = totalEarnings)
if(cIdx == 1){
blockHPData = blockData
}else{
blockLPData = blockData
}
}
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
thisTrialData$sellTime
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
blockData= thisTrialData
trialWTW = numeric(length = length(blockData$trialEarnings)) # initialize the per-trial estimate of WTW
quitIdx = blockData$trialEarnings == 0
# use either the rewardTime (for reward trials) or time waited (for quit trials)
#   (not using time waited for reward trials because this includes the post-reward RT)
timeWaited = blockData$scheduledWait # use rewardtime make more sense but sometime nan
timeWaited[quitIdx] = blockData$timeWaited[quitIdx]
### find the longest time waited up through the first quit trial
#   (or, if there were no quit trials, the longest time waited at all)
#   that will be the WTW estimate for all trials prior to the first quit
firstQuit = which(quitIdx)[1]
if (is.na(firstQuit)) {firstQuit = length(blockData$trialEarnings)} # if no quit, set to the last trial
currentWTW = max(timeWaited[1:firstQuit])
thisTrialIdx = firstQuit - 1
trialWTW[1:thisTrialIdx] = currentWTW
### iterate through the remaining trials, updating currentWTW
while (thisTrialIdx < length(blockData$trialEarnings)) {
thisTrialIdx = thisTrialIdx + 1
if (quitIdx[thisTrialIdx]) {currentWTW = timeWaited[thisTrialIdx]}
else {currentWTW = max(currentWTW, timeWaited[thisTrialIdx])}
trialWTW[thisTrialIdx] = currentWTW
}
### impose a ceiling value, since trial durations exceeding some value may be infrequent
trialWTW = pmin(trialWTW, wtwCeiling)
### convert from per-trial to per-second over the course of the block
timeWTW = numeric(length = length(tGrid)) # initialize output
binStartIdx = 1
thisTrialIdx = 0
while (thisTrialIdx < length(blockData$trialEarnings)) {
thisTrialIdx = thisTrialIdx + 1
binEndTime = blockData$sellTime[thisTrialIdx]
binEndIdx = max(which(tGrid < binEndTime)) # last grid point that falls within this trial
timeWTW[binStartIdx:binEndIdx] = trialWTW[thisTrialIdx]
binStartIdx = binEndIdx + 1
}
blockData$sellTime[thisTrialIdx]
max(which(tGrid < binEndTime))
which(tGrid < binEndTime)
source('~/Documents/first_kick/wtw_SDG_new/subFxs/analysisFxs.R', echo=TRUE)
# this script analysized the simulation data on the group level
modelName = "monte"
load(sprintf("genData/simulation/%s/realParas.RData", modelName)) # for nComb, paraNames, nPara
############ load data and functions #########
# generally loading
library("ggplot2")
library("dplyr")
library("tidyr")
source(file = './subFxs/plotThemes.R')
load("wtwSettings.RData")
# specific loading
library('scales')
source('subFxs/analysisFxs.R')
load(sprintf("genData/simulation/%s/trialHPData.RData", modelName)) # trialHPData
load(sprintf("genData/simulation/%s/trialLPData.RData", modelName)) # trialLPData
nRep = 5
# trial-level analysis
plotTrialwiseData = F
plotKMSC = F
plotWTW = F
# loop over conditions
for(cIdx in 1 : 2){
cond = conditions[cIdx]
if(cIdx == 1){
trialData = trialHPData
}else{
trialData = trialLPData
}
# generate arguments for later analysis
tMax = tMaxs[cIdx]
kmGrid = seq(0, tMax, by=0.1)
# initialize outputs
totalEarnings_ = matrix(0, nComb, nRep)
AUC_ = matrix(0, nComb, nRep)
# loop over combIdx
for(combIdx in 1 : nComb){
# loop over repetitions
for(rIdx in 1 : nRep){
# select data
thisTrialData = trialData[[simIdx[combIdx, rIdx]]]
realPara = realParas[combIdx,]
# generate arguments for later analysis
label = sprintf('%s %s', conditions[cIdx], paste0(paraNames, realPara, collapse = " "))
# summarise totalEarnings
totalEarnings_[combIdx, rIdx] =  sum(thisTrialData$trialEarnings)
# plot trial-by-trial data
if (plotTrialwiseData) {
trialPlots(thisTrialData,label)
}
# survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
AUC_[combIdx, rIdx] = kmscResults[['auc']]
# WTW time series
wtwCeiling = tMax
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
}# end of repetitions
}# end of para combinations
# organize and save blockData
AUC = rowSums(AUC_) / nRep
totalEarnings = rowSums(totalEarnings_) / nRep
blockData = data.frame(id = 1 : combIdx, blockNum = rep(1, nComb),
condition = factor(rep(cond, each = nComb), levels = c("HP", "LP")),
AUC = AUC,
totalEarnings = totalEarnings)
if(cIdx == 1){
blockHPData = blockData
}else{
blockLPData = blockData
}
}
blockData = data.frame(rbind(blockHPData, blockLPData), rbind(realParas))
colnames(blockData)[(ncol(blockData) - nPara + 1) : ncol(blockData) ] = paraNames
ggplot(blockData, aes(totalEarnings)) + geom_histogram(bins = 15) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of simulations") + saveTheme + xlim(c(0, 600))
fileName = sprintf("figures/simDataAnalysis/totalEarnings.pdf")
ggsave(fileName, width = 16, height = 8)
# calculate range
dplyr::summarise(group_by(blockData, condition),
minEarning = min(totalEarnings),
maxEarning = max(totalEarnings))
############ summarise para effects on total earnings ###########
paraValues = 1:5
paraData = data.frame(condition = rep(c("HP", "LP"), each = nValue, nPara),
paraNames = rep(paraNames, each = nValue * 2),
paraValues = rep(paraValues, nPara * 2))
paraData$paraNames = factor(paraData$paraNames, levels = paraNames)
# summarise mu
muByPhi = summarise_at(group_by(blockData, condition, phi), vars(AUC:totalEarnings), mean)
muByTau = summarise_at(group_by(blockData, condition, tau), vars(AUC:totalEarnings), mean)
muByGamma = summarise_at(group_by(blockData, condition, gamma), vars(AUC:totalEarnings), mean)
# summarise sd
stdByPhi = summarise_at(group_by(blockData, condition, phi), vars(AUC:totalEarnings), sd)
stdByTau = summarise_at(group_by(blockData, condition, tau), vars(AUC:totalEarnings), sd)
stdByGamma = summarise_at(group_by(blockData, condition, gamma), vars(AUC:totalEarnings), sd)
#
mu = rbind(muByPhi, muByTau, muByGamma);
mu = mu[, 3:4]
std = rbind(stdByPhi, stdByTau, stdByGamma)
std = std[,3:4]
max= mu + std
min = mu -std
summaryEarnData = cbind(paraData, mu[,2], std[,2], max[,2], min[,2]);
summaryAUCData = cbind(paraData, mu[,1], std[,1], max[,1], min[,1]);
colnames(summaryEarnData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
colnames(summaryAUCData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
# plot
for(c in 1:2){
cond = conditions[c]
ggplot(summaryAUCData[summaryAUCData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("AUC / s") + ggtitle(cond)
fileName = sprintf("figures/simDataAnalysis/paraAUCEffect%s.pdf", cond)
ggsave(fileName, width = 16, height = 8)
}
# plot
for(c in 1:2){
cond = conditions[c]
ggplot(summaryEarnData[summaryEarnData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("Total Earnings") + ggtitle(cond)
fileName = sprintf("figures/simDataAnalysis/paraEarnEffect%s.pdf", cond)
ggsave(fileName, width = 16, height = 8)
}
######### plot AUC against totalEarnings #######
# prepare data
plotData = rbind(as.data.frame(colpHPData[c(1,3)]),
as.data.frame(colpLPData[c(1,3)]))
plotData$condition = rep(c('HP', 'LP'), each = length(colpHPData$totalEarnings))
plotData = plotData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
# plot for LP
ggplot(plotData[plotData$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point(size = 1.5) +
saveTheme + ylab('Total earnings') + xlim(c(0, tMaxs[2])) + ylim(c(0, 500))
fileName = file.path(outFile, "AUCLP_earningsLP.pdf")
ggsave(fileName, width = 6, height = 4)
# plot for HP
ggplot(plotData[plotData$condition == 'HP',], aes(AUC, totalEarnings)) + geom_point(size = 1.5) +
saveTheme + ylab('Total earnings') + xlim(c(0, tMaxs[1])) + ylim(c(0, 500))
fileName = file.path(outFile, "AUCHP_earningsHP.pdf")
ggsave(fileName, width = 6, height = 4)
######## plot the timeseries of wtw #######
meanValues = c(apply(rawWTW$HP, MARGIN = 3, FUN = mean),
apply(rawWTW$LP, MARGIN = 3, FUN = mean))
stdValues = c(apply(rawWTW$HP, MARGIN = 3, FUN = sd),
apply(rawWTW$LP, MARGIN = 3, FUN = sd))
plotData = data.frame(meanValues, stdValues,
time = rep(tGrid, time = 2),
condition = rep(c('HP', 'LP'), each = length(tGrid)),
minValues = meanValues - stdValues / sqrt(dim(rawWTW$HP)[1]),
maxValues = meanValues + stdValues / sqrt(dim(rawWTW$HP)[1]))
ggplot(plotData, aes(time, meanValues, color = condition)) +
geom_ribbon(data = plotData[plotData$condition == 'HP',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_ribbon(data = plotData[plotData$condition == 'LP',], aes(ymin=minValues, ymax=maxValues),linetype=0, alpha = 0.1, color = "#bababa") +
geom_line(size = 1) + xlab('Time in block / s') + ylab('WTW / s') + saveTheme
fileName = file.path(outFile, "wtwTimeSeries.pdf")
ggsave(fileName, width = 12, height = 8)
########### plot HPAUC against LPAUC ##############
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3 ) + geom_smooth(method = lm) +
xlab('HP AUC/s') + ylab("LP AUC /s") + saveTheme
fileName = file.path(outFile, "HPAUC_LPAUC.pdf")
ggsave(fileName, width = 8, height = 8)
plotData = blockData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
ggplot(plotData[plotData$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point(size = 1.5) +
saveTheme + ylab('Total earnings') + xlim(c(0, tMaxs[2])) + ylim(c(0, 500))
fileName = file.path(outFile, "AUCLP_earningsLP.pdf")
# plot for HP
ggplot(plotData[plotData$condition == 'HP',], aes(AUC, totalEarnings)) + geom_point(size = 1.5) +
saveTheme + ylab('Total earnings') + xlim(c(0, tMaxs[1])) + ylim(c(0, 500))
fileName = "figures/simDataAnalysis/AUCLP_earningsHP.pdf"
ggsave(fileName, width = 6, height = 4)
ggplot(plotData[plotData$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point(size = 1.5) +
saveTheme + ylab('Total earnings') + xlim(c(0, tMaxs[2])) + ylim(c(0, 500))
fileName = "figures/simDataAnalysis/AUCLP_earningsLP.pdf"
ggsave(fileName, width = 6, height = 4)
plotData = data.frame(HPAUC = colpHPData$AUC, LPAUC = colpLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3 ) + geom_smooth(method = lm) +
xlab('HP AUC/s') + ylab("LP AUC /s") + saveTheme
fileName = fileName = "figures/simDataAnalysis/HPAUC_LPAUC.pdf"
ggsave(fileName, width = 8, height = 8)
########### plot HPAUC against LPAUC ##############
plotData = data.frame(HPAUC = blockHPData$AUC, LPAUC = blockLPData$AUC)
ggplot(plotData, aes(HPAUC, LPAUC)) + geom_point(shape = 3 ) + geom_smooth(method = lm) +
xlab('HP AUC/s') + ylab("LP AUC /s") + saveTheme
fileName = fileName = "figures/simDataAnalysis/HPAUC_LPAUC.pdf"
ggsave(fileName, width = 8, height = 8)
simulation("monteCfd")
source('~/Documents/first_kick/wtw_SDG_new/simulation.R', echo=TRUE)
simulation("monteCfd")
# this script analysized the simulation data on the group level
modelName = "monteCfd"
load(sprintf("genData/simulation/%s/realParas.RData", modelName)) # for nComb, paraNames, nPara
############ load data and functions #########
# generally loading
library("ggplot2")
library("dplyr")
library("tidyr")
source(file = './subFxs/plotThemes.R')
load("wtwSettings.RData")
# specific loading
library('scales')
source('subFxs/analysisFxs.R')
load(sprintf("genData/simulation/%s/trialHPData.RData", modelName)) # trialHPData
load(sprintf("genData/simulation/%s/trialLPData.RData", modelName)) # trialLPData
nRep = 5
# trial-level analysis
plotTrialwiseData = F
plotKMSC = F
plotWTW = F
# loop over conditions
for(cIdx in 1 : 2){
cond = conditions[cIdx]
if(cIdx == 1){
trialData = trialHPData
}else{
trialData = trialLPData
}
# generate arguments for later analysis
tMax = tMaxs[cIdx]
kmGrid = seq(0, tMax, by=0.1)
# initialize outputs
totalEarnings_ = matrix(0, nComb, nRep)
AUC_ = matrix(0, nComb, nRep)
# loop over combIdx
for(combIdx in 1 : nComb){
# loop over repetitions
for(rIdx in 1 : nRep){
# select data
thisTrialData = trialData[[simIdx[combIdx, rIdx]]]
realPara = realParas[combIdx,]
# generate arguments for later analysis
label = sprintf('%s %s', conditions[cIdx], paste0(paraNames, realPara, collapse = " "))
# summarise totalEarnings
totalEarnings_[combIdx, rIdx] =  sum(thisTrialData$trialEarnings)
# plot trial-by-trial data
if (plotTrialwiseData) {
trialPlots(thisTrialData,label)
}
# survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
AUC_[combIdx, rIdx] = kmscResults[['auc']]
# WTW time series
wtwCeiling = tMax
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
}# end of repetitions
}# end of para combinations
# organize and save blockData
AUC = rowSums(AUC_) / nRep
totalEarnings = rowSums(totalEarnings_) / nRep
blockData = data.frame(id = 1 : combIdx, blockNum = rep(1, nComb),
condition = factor(rep(cond, each = nComb), levels = c("HP", "LP")),
AUC = AUC,
totalEarnings = totalEarnings)
if(cIdx == 1){
blockHPData = blockData
}else{
blockLPData = blockData
}
}
dir.create("figures/simDataAnalysis/monteCfd")
####### plot distribution of totalEarnings
blockData = data.frame(rbind(blockHPData, blockLPData), rbind(realParas))
colnames(blockData)[(ncol(blockData) - nPara + 1) : ncol(blockData) ] = paraNames
ggplot(blockData, aes(totalEarnings)) + geom_histogram(bins = 15) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of simulations") + saveTheme + xlim(c(0, 600))
fileName = sprintf("figures/simDataAnalysis/%s/totalEarnings.pdf", modelName)
ggsave(fileName, width = 16, height = 8)
# calculate range
dplyr::summarise(group_by(blockData, condition),
minEarning = min(totalEarnings),
maxEarning = max(totalEarnings))
############ summarise para effects on total earnings ###########
paraValues = 1:5
paraData = data.frame(condition = rep(c("HP", "LP"), each = nValue, nPara),
paraNames = rep(paraNames, each = nValue * 2),
paraValues = rep(paraValues, nPara * 2))
paraData$paraNames = factor(paraData$paraNames, levels = paraNames)
# summarise mu
muByPhi = summarise_at(group_by(blockData, condition, phi), vars(AUC:totalEarnings), mean)
muByTau = summarise_at(group_by(blockData, condition, tau), vars(AUC:totalEarnings), mean)
muByGamma = summarise_at(group_by(blockData, condition, gamma), vars(AUC:totalEarnings), mean)
# summarise sd
stdByPhi = summarise_at(group_by(blockData, condition, phi), vars(AUC:totalEarnings), sd)
stdByTau = summarise_at(group_by(blockData, condition, tau), vars(AUC:totalEarnings), sd)
stdByGamma = summarise_at(group_by(blockData, condition, gamma), vars(AUC:totalEarnings), sd)
#
mu = rbind(muByPhi, muByTau, muByGamma);
mu = mu[, 3:4]
std = rbind(stdByPhi, stdByTau, stdByGamma)
std = std[,3:4]
max= mu + std
min = mu -std
summaryEarnData = cbind(paraData, mu[,2], std[,2], max[,2], min[,2]);
summaryAUCData = cbind(paraData, mu[,1], std[,1], max[,1], min[,1]);
colnames(summaryEarnData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
colnames(summaryAUCData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
# plot
for(c in 1:2){
cond = conditions[c]
ggplot(summaryAUCData[summaryAUCData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("AUC / s") + ggtitle(cond)
fileName = sprintf("figures/simDataAnalysis/%s/paraAUCEffect%s.pdf", modelName, cond)
ggsave(fileName, width = 16, height = 8)
}
# plot
for(c in 1:2){
cond = conditions[c]
ggplot(summaryEarnData[summaryEarnData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("Total Earnings") + ggtitle(cond)
fileName = sprintf("figures/simDataAnalysis/%s/paraEarnEffect%s.pdf",modelName, cond)
ggsave(fileName, width = 16, height = 8)
}
summaryAUCData
mean(summaryAUCData$mu[summaryAUCData$condition == "HP" & summaryAUCData$paraNames == "phi"])
mean(summaryAUCData$mu[summaryAUCData$condition == "HP" & summaryAUCData$paraNames == "c"])
mean(summaryAUCData$mu[summaryAUCData$condition == "HP" & summaryAUCData$paraNames == "gamma"])
muByTau = summarise_at(group_by(blockData, condition, c), vars(AUC:totalEarnings), mean)
paraValues = 1:5
paraData = data.frame(condition = rep(c("HP", "LP"), each = nValue, nPara),
paraNames = rep(paraNames, each = nValue * 2),
paraValues = rep(paraValues, nPara * 2))
paraData$paraNames = factor(paraData$paraNames, levels = paraNames)
# summarise mu
muByPhi = summarise_at(group_by(blockData, condition, phi), vars(AUC:totalEarnings), mean)
muByTau = summarise_at(group_by(blockData, condition, c), vars(AUC:totalEarnings), mean)
muByGamma = summarise_at(group_by(blockData, condition, gamma), vars(AUC:totalEarnings), mean)
# summarise sd
stdByPhi = summarise_at(group_by(blockData, condition, phi), vars(AUC:totalEarnings), sd)
stdByTau = summarise_at(group_by(blockData, condition, tau), vars(AUC:totalEarnings), sd)
stdByGamma = summarise_at(group_by(blockData, condition, gamma), vars(AUC:totalEarnings), sd)
#
mu = rbind(muByPhi, muByTau, muByGamma);
mu = mu[, 3:4]
std = rbind(stdByPhi, stdByTau, stdByGamma)
std = std[,3:4]
max= mu + std
min = mu -std
summaryEarnData = cbind(paraData, mu[,2], std[,2], max[,2], min[,2]);
summaryAUCData = cbind(paraData, mu[,1], std[,1], max[,1], min[,1]);
colnames(summaryEarnData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
colnames(summaryAUCData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
# plot
for(c in 1:2){
cond = conditions[c]
ggplot(summaryAUCData[summaryAUCData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("AUC / s") + ggtitle(cond)
fileName = sprintf("figures/simDataAnalysis/%s/paraAUCEffect%s.pdf", modelName, cond)
ggsave(fileName, width = 16, height = 8)
}
# plot
for(c in 1:2){
cond = conditions[c]
ggplot(summaryEarnData[summaryEarnData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("Total Earnings") + ggtitle(cond)
fileName = sprintf("figures/simDataAnalysis/%s/paraEarnEffect%s.pdf",modelName, cond)
ggsave(fileName, width = 16, height = 8)
}
######### plot AUC against totalEarnings #######
# prepare data
plotData = blockData %>% arrange(totalEarnings) %>%group_by(condition) %>%
mutate(earningRank = rank(totalEarnings, ties.method = "first"))
# plot for LP
ggplot(plotData[plotData$condition == 'LP',], aes(AUC, totalEarnings)) + geom_point(size = 1.5) +
saveTheme + ylab('Total earnings') + xlim(c(0, tMaxs[2])) + ylim(c(0, 500))
fileName = sprintf("figures/simDataAnalysis/%s/AUCLP_earningsLP.pdf", modelName)
ggsave(fileName, width = 6, height = 4)
# plot for HP
ggplot(plotData[plotData$condition == 'HP',], aes(AUC, totalEarnings)) + geom_point(size = 1.5) +
saveTheme + ylab('Total earnings') + xlim(c(0, tMaxs[1])) + ylim(c(0, 500))
fileName = sprintf("figures/simDataAnalysis/%s/AUCLP_earningsHP.pdf", modelName)
ggsave(fileName, width = 6, height = 4)
#  load libraries and set environments
options(warn=-1, message =-1) # default settings borrowed somewhere
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan') #load libraries
Sys.setenv(USE_CXX14=1) # making rstan working on this device
rstan_options(auto_write = TRUE) # default settings borrowed somewhere
options(mc.cores = parallel::detectCores())# enable multi-core precessors
library("loo")
# source scripts
source('subFxs/modelFittingFxs.R') # for fitting single case
source('subFxs/wtwSettings.R')
source('subFxs/loadFxs.R') # for load data
lookup("ifelse")
