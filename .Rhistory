else {currentWTW = max(currentWTW, timeWaited[thisTrialIdx])}
trialWTW[thisTrialIdx] = currentWTW
}
### impose a ceiling value, since trial durations exceeding some value may be infrequent
trialWTW = pmin(trialWTW, wtwCeiling)
### convert from per-trial to per-second over the course of the block
timeWTW = numeric(length = length(tGrid)) # initialize output
binStartIdx = 1
thisTrialIdx = 0
while (thisTrialIdx < length(blockData$trialEarnings)) {
thisTrialIdx = thisTrialIdx + 1
binEndTime = blockData$sellTime[thisTrialIdx]
binEndIdx = max(which(tGrid < binEndTime)) # last grid point that falls within this trial
timeWTW[binStartIdx:binEndIdx] = trialWTW[thisTrialIdx]
binStartIdx = binEndIdx + 1
}
# extend the final value to the end of the vector
while (thisTrialIdx < length(blockData$trialEarnings)) {
thisTrialIdx = thisTrialIdx + 1
binEndTime = blockData$sellTime[thisTrialIdx]
binEndIdx = max(which(tGrid < binEndTime)) # last grid point that falls within this trial
timeWTW[binStartIdx:binEndIdx] = trialWTW[thisTrialIdx]
binStartIdx = binEndIdx + 1
}
thisTrialIdx = 0
while (thisTrialIdx < length(blockData$trialEarnings)) {
thisTrialIdx = thisTrialIdx + 1
binEndTime = blockData$sellTime[thisTrialIdx]
binEndIdx = max(which(tGrid < binEndTime)) # last grid point that falls within this trial
timeWTW[binStartIdx:binEndIdx] = trialWTW[thisTrialIdx]
binStartIdx = binEndIdx + 1
}
# extend the final value to the end of the vector
binStartIdx:binEndIdx
binStartIdx
binEndIdx
max(which(tGrid < binEndTime))
binEndTime
blockData$sellTime[thisTrialIdx]
# load libraries
source('subFxs/loadFxs.R') # for loading data
source('subFxs/analysisFxs.R') # for analysis
source("subFxs/plotThemes.R")
library("ggplot2")
library('dplyr')
# library(Hmisc)
# load setting parameters
load("wtwSettings.RData")
# load all data
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
nBlock = 3
cat('Analyzing data for n','=',n,'subjects.\n')
# control which individual-level plots to generate
plotTrialwiseData = F
plotKMSC = F
plotWTW = F
plotTimeEarnings = F   # no good effect
plotTrialEarnings =  F  # no good effect
# initialize outputs, organised by block
tGrid = seq(0, blockSecs, by = 0.1)
AUC = numeric(length =n * nBlock)
totalEarnings =  numeric(length =n * nBlock)
sIdx =1
bkIdx = 1
thisID = allIDs[sIdx]
# select data
thisTrialData = trialData[[thisID]]
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
# generate arguments for later analysis
label = sprintf('Subject %s, Cond %s, Stress %s)',thisID, hdrData$condition[sIdx], hdrData$stress[sIdx])
noIdx = (sIdx - 1) * nBlock + bkIdx #
tMax = ifelse(hdrData$condition[sIdx] == conditions[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
thisTrialData$sellTime
thisTrialData$timeWaited
cumsum(c(1,2,3))
source('~/Documents/first_kick/wtw_SDG_new/subFxs/simulationFxs.R', echo=TRUE)
source('~/Documents/first_kick/wtw_SDG_new/simulation.R', echo=TRUE)
simulation("monte")
# this script analysized the simulation data on the group level
modelName = "monte"
pars = c("phi", "tau", "gamma")
############ load data and functions #########
# generally loading
library("ggplot2")
library("dplyr")
library("tidyr")
source(file = './subFxs/plotThemes.R')
load("wtwSettings.RData")
# specific loading
library('scales')
source('subFxs/analysisFxs.R')
load(sprintf("genData/simulation/%s/realParas.RData", modelName)) # for nComb
load(sprintf("genData/simulation/%s/trialHPData.RData", modelName)) # trialHPData
load(sprintf("genData/simulation/%s/trialLPData.RData", modelName)) # trialLPData
# trial-level analysis
plotTrialwiseData = F
plotKMSC = F
plotWTW = F
# loop over conditions
for(cIdx in 1 : 2){
cond = conditions[cIdx]
if(cIdx == 1){
trialData = trialHPData
}else{
trialData = trialLPData
}
# generate arguments for later analysis
tMax = tMaxs[cIdx]
kmGrid = seq(0, tMax, by=0.1)
# initialize outputs
totalEarnings = vector(length = nComb)
AUC = vector(length = nComb)
# loop over combIdx
for(combIdx in 1 : nComb){
# select data
thisTrialData = trialData[[combIdx]]
realPara = realParas[combIdx,]
# generate arguments for later analysis
label = sprintf('Cond %s %s)', conditions[cIdx], paste0(pars, realParas))
# summarise totalEarnings
totalEarnings[combIdx] =  sum(thisTrialData$trialEarnings)
# plot trial-by-trial data
if (plotTrialwiseData) {
trialPlots(thisTrialData,label)
}
# survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
AUC[combIdx] = kmscResults[['auc']]
# WTW time series
wtwCeiling = tMax
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
}
# organize and save blockData
blockData = data.frame(id = 1 : combIdx, blockNum = rep(1, nComb),
condition = factor(rep(cond, each = nComb), levels = c("HP", "LP")),
AUC = AUC,
totalEarnings = totalEarnings)
if(cIdx == 1){
blockHPData = blockData
}else{
blockLPData = blockData
}
}
plotWTW = T
wtwCeiling = tMax
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
sprintf('Cond %s %s)', conditions[cIdx], paste0(pars, realParas))
conditions[cIdx]
# generate arguments for later analysis
label = sprintf('Cond %s %s)', conditions[cIdx], paste0(pars, realPara))
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
label
sprintf('Cond %s %s', conditions[cIdx], paste0(pars, realPara))
paste0(pars, realPara)
paste(paste0(pars, realPara))
class(paste0(pars, realPara))
paste0(pars, realPara, sep = "")
(paste0(pars, realPara, collapse = T)
)
paste(paste0(pars, realPara, collapse)
)
paste0("s", realPara)
paste0("a", "b")
reapPara
realPara
a = paste0("a", realParas)
a = paste0("a", realPara[1,])
a = paste0("a", realParas[1,])
paste(a, collapse="")
sprintf('Cond %s %s', conditions[cIdx], paste0(pars, realPara, collapse = " "))
sprintf('Cond%s %s', conditions[cIdx], paste0(pars, realPara, collapse = " "))
# generate arguments for later analysis
label = sprintf('%s %s', conditions[cIdx], paste0(pars, realPara, collapse = " "))
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
trialPlots(thisTrialData,label)
blockData = data.frame(rbind(blockHPData, blockLPData), rbind(realParas))
View(blockData)
colnames(blockData)[(0 - length(nPara)):-1] = pars
View(blockData)
(0 - length(nPara)):-1
(0 - length(nPara))
####### plot distribution of totalEarnings
blockData = data.frame(rbind(blockHPData, blockLPData), rbind(realParas))
colnames(blockData)[(0 - length(pars)):-1] = pars
View(blockData)
blockData = data.frame(rbind(blockHPData, blockLPData), rbind(realParas))
(0 - length(pars)):-1
colnames(blockData)[(0 - length(pars)):-1]
colnames(blockData)
length(colnames(blockData))
a = colnames(blockData)
a[-3:-1]
a[(-3):(-1)]
colnames(blockData)[ncol(blockData) - length(pars) : ncol(blockData) ]
[ncol(blockData) - length(pars)
ncol(blockData) - length(pars)
ncol(blockData)
colnames(blockData)[6:8]
colnames(blockData)[ncol(blockData) - length(pars) + 1 : ncol(blockData) ]
colnames(blockData)[(ncol(blockData) - length(pars) + 1) : ncol(blockData) ]
colnames(blockData)[(ncol(blockData) - length(pars) + 1) : ncol(blockData) ] = pars
ggplot(blockData, aes(totalEarnings)) + geom_histogram(bins = 15) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of simulations") + saveTheme + xlim(c(0, 600))
fileName = file.path(outFile, 'earningSml.pdf')
realParas
blockData = data.frame(rbind(blockHPData, blockLPData), rbind(realParas))
colnames(blockData)[(ncol(blockData) - length(pars) + 1) : ncol(blockData) ] = pars
ggplot(blockData, aes(totalEarnings)) + geom_histogram(bins = 15) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of simulations") + saveTheme + xlim(c(0, 600))
fileName = sprintf("figures/simDataAnalysis/totalEarnings.pdf")
ggsave(fileName, width = 16, height = 8)
dir.create("figures/simDataAnalysis")
fileName = sprintf("figures/simDataAnalysis/totalEarnings.pdf")
ggsave(fileName, width = 16, height = 8)
dir.create("figures")
dir.create("figures/simDataAnalysis")
####### plot distribution of totalEarnings
blockData = data.frame(rbind(blockHPData, blockLPData), rbind(realParas))
colnames(blockData)[(ncol(blockData) - length(pars) + 1) : ncol(blockData) ] = pars
ggplot(blockData, aes(totalEarnings)) + geom_histogram(bins = 15) +
facet_wrap(~condition, nrow = 1) + xlab('Total earnings') + ylab("Num of simulations") + saveTheme + xlim(c(0, 600))
fileName = sprintf("figures/simDataAnalysis/totalEarnings.pdf")
ggsave(fileName, width = 16, height = 8)
summarise(group_by(blockData, condition),
minEarning = min(totalEarnings),
maxEarning = max(totalEarnings))
unique(blockData$condition)
summarise(group_by(blockData, condition),
minEarning = min(totalEarnings),
maxEarning = max(totalEarnings))
dplyr::summarise(group_by(blockData, condition),
minEarning = min(totalEarnings),
maxEarning = max(totalEarnings))
paraValues = 1:5
paraData = data.frame(condition = rep(c("HP", "LP"), each = nValue, nPara),
paraNames = rep(paraNames, each = nValue * 2),
paraValues = rep(paraValues, nPara * 2))
paraData$paraNames = factor(paraData$paraNames, levels = paraNames)
paraNames
# this script analysized the simulation data on the group level
modelName = "monte"
load(sprintf("genData/simulation/%s/realParas.RData", modelName)) # for nComb, parNames, nPara
paraValues = 1:5
paraData = data.frame(condition = rep(c("HP", "LP"), each = nValue, nPara),
paraNames = rep(paraNames, each = nValue * 2),
paraValues = rep(paraValues, nPara * 2))
paraData$paraNames = factor(paraData$paraNames, levels = paraNames)
# summarise mu
muByPhi = summarise_at(group_by(plotData, condition, phi), vars(AUC:totalEarnings), mean)
muByTau = summarise_at(group_by(plotData, condition, tau), vars(AUC:totalEarnings), mean)
muByGamma = summarise_at(group_by(plotData, condition, gamma), vars(AUC:totalEarnings), mean)
# summarise sd
stdByPhi = summarise_at(group_by(plotData, condition, phi), vars(AUC:totalEarnings), sd)
stdByTau = summarise_at(group_by(plotData, condition, tau), vars(AUC:totalEarnings), sd)
stdByGamma = summarise_at(group_by(plotData, condition, gamma), vars(AUC:totalEarnings), sd)
#
mu = rbind(muByPhi, muByTau, muByGamma);
mu = mu[, 3:4]
std = rbind(stdByPhi, stdByTau, stdByGamma)
std = std[,3:4]
max= mu + std
min = mu -std
summaryEarnData = cbind(paraData, mu[,2], std[,2], max[,2], min[,2]);
summaryAUCData = cbind(paraData, mu[,1], std[,1], max[,1], min[,1]);
colnames(summaryEarnData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
colnames(summaryAUCData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
paraValues = 1:5
paraData = data.frame(condition = rep(c("HP", "LP"), each = nValue, nPara),
paraNames = rep(paraNames, each = nValue * 2),
paraValues = rep(paraValues, nPara * 2))
paraData$paraNames = factor(paraData$paraNames, levels = paraNames)
# summarise mu
muByPhi = summarise_at(group_by(blockData, condition, phi), vars(AUC:totalEarnings), mean)
muByTau = summarise_at(group_by(blockData, condition, tau), vars(AUC:totalEarnings), mean)
muByGamma = summarise_at(group_by(blockData, condition, gamma), vars(AUC:totalEarnings), mean)
# summarise sd
stdByPhi = summarise_at(group_by(blockData, condition, phi), vars(AUC:totalEarnings), sd)
stdByTau = summarise_at(group_by(blockData, condition, tau), vars(AUC:totalEarnings), sd)
stdByGamma = summarise_at(group_by(blockData, condition, gamma), vars(AUC:totalEarnings), sd)
#
mu = rbind(muByPhi, muByTau, muByGamma);
mu = mu[, 3:4]
std = rbind(stdByPhi, stdByTau, stdByGamma)
std = std[,3:4]
max= mu + std
min = mu -std
summaryEarnData = cbind(paraData, mu[,2], std[,2], max[,2], min[,2]);
summaryAUCData = cbind(paraData, mu[,1], std[,1], max[,1], min[,1]);
colnames(summaryEarnData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
colnames(summaryAUCData) = c(colnames(paraData), 'mu', 'std', 'max', 'min')
# plot
for(c in 1:2){
cond = conditions[c]
ggplot(summaryAUCData[summaryAUCData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("AUC / s") + ggtitle(cond)
fileName = sprintf("figures/simDataAnaslysis/paraAUCEffect%s.pdf", cond)
ggsave(fileName, width = 16, height = 8)
}
# plot
for(c in 1:2){
cond = conditions[c]
ggplot(summaryEarnData[summaryEarnData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("Total Earnings") + ggtitle(cond)
fileName = sprintf("figures/simDataAnaslysis/paraEarnEffect%s.pdf", cond)
ggsave(fileName, width = 16, height = 8)
}
# plot
for(c in 1:2){
cond = conditions[c]
ggplot(summaryAUCData[summaryAUCData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("AUC / s") + ggtitle(cond)
fileName = sprintf("figures/simDataAnalysis/paraAUCEffect%s.pdf", cond)
ggsave(fileName, width = 16, height = 8)
}
# plot
for(c in 1:2){
cond = conditions[c]
ggplot(summaryEarnData[summaryEarnData$condition == cond,], aes(factor(paraValues), mu)) +
geom_bar(stat = "identity", width=0.5, fill = conditionColors[c]) + geom_errorbar(aes(ymin = min, ymax = max), width=.2)+
facet_wrap(~paraNames, nrow = 1)+ saveTheme +
xlab("Parameter value") + ylab("Total Earnings") + ggtitle(cond)
fileName = sprintf("figures/simDataAnalysis/paraEarnEffect%s.pdf", cond)
ggsave(fileName, width = 16, height = 8)
}
modelName = "monte"
# library
library('ggplot2')
library('dplyr')
library('tidyr')
source('subFxs/simulationFxs.R') #
load("wtwSettings.RData")
fileName = sprintf('genData/simulation/%s/realParas.RData', modelName)
load(fileName)
# generate outfile
outFile = sprintf('genData/simulation/%s', modelName)
dir.create(outFile)
# choose modelFun
modelFun = getModelFun(modelName)
################ simulation ################
nRep = 5
count = t(matrix(1 : (nComb * nRep), nRep, nComb))
condIdx = 1
cond = conditions[condIdx];
tMax = tMaxs[condIdx];
# set seed
set.seed(123)
# initialize outputs
trialData = vector(length = nComb * nRep, mode ='list')
h = 1
j = 1
para = realParas[h,];
set.seed(123)
tempt = modelFun(para, cond)
para = para
para
cond = cond
wIni = wInis[cIdx]
wInis
cond
wIni = wInis[1]
set.seed(123)
tempt$trialNum
tempt$trialEarnings
tempt$timeWaited
modelName = "monte"
load(sprintf("genData/simulation/%s/realParas.RData", modelName)) # for nComb, parNames, nPara
############ load data and functions #########
# generally loading
library("ggplot2")
library("dplyr")
library("tidyr")
source(file = './subFxs/plotThemes.R')
load("wtwSettings.RData")
# specific loading
library('scales')
source('subFxs/analysisFxs.R')
load(sprintf("genData/simulation/%s/trialHPData.RData", modelName)) # trialHPData
load(sprintf("genData/simulation/%s/trialLPData.RData", modelName)) # trialLPData
# trial-level analysis
plotTrialwiseData = F
plotKMSC = F
plotWTW = F
# loop over conditions
for(cIdx in 1 : 2){
cond = conditions[cIdx]
if(cIdx == 1){
trialData = trialHPData
}else{
trialData = trialLPData
}
# generate arguments for later analysis
tMax = tMaxs[cIdx]
kmGrid = seq(0, tMax, by=0.1)
# initialize outputs
totalEarnings = vector(length = nComb)
AUC = vector(length = nComb)
# loop over combIdx
for(combIdx in 1 : nComb){
# select data
thisTrialData = trialData[[combIdx]]
realPara = realParas[combIdx,]
# generate arguments for later analysis
label = sprintf('%s %s', conditions[cIdx], paste0(parNames, realPara, collapse = " "))
# summarise totalEarnings
totalEarnings[combIdx] =  sum(thisTrialData$trialEarnings)
# plot trial-by-trial data
if (plotTrialwiseData) {
trialPlots(thisTrialData,label)
}
# survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
AUC[combIdx] = kmscResults[['auc']]
# WTW time series
wtwCeiling = tMax
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
}
# organize and save blockData
blockData = data.frame(id = 1 : combIdx, blockNum = rep(1, nComb),
condition = factor(rep(cond, each = nComb), levels = c("HP", "LP")),
AUC = AUC,
totalEarnings = totalEarnings)
if(cIdx == 1){
blockHPData = blockData
}else{
blockLPData = blockData
}
}
rm(list = ls())
# this script analysized the simulation data on the group level
modelName = "monte"
load(sprintf("genData/simulation/%s/realParas.RData", modelName)) # for nComb, parNames, nPara
############ load data and functions #########
# generally loading
library("ggplot2")
library("dplyr")
library("tidyr")
source(file = './subFxs/plotThemes.R')
load("wtwSettings.RData")
# specific loading
library('scales')
source('subFxs/analysisFxs.R')
load(sprintf("genData/simulation/%s/trialHPData.RData", modelName)) # trialHPData
load(sprintf("genData/simulation/%s/trialLPData.RData", modelName)) # trialLPData
# trial-level analysis
plotTrialwiseData = F
plotKMSC = F
plotWTW = F
# loop over conditions
for(cIdx in 1 : 2){
cond = conditions[cIdx]
if(cIdx == 1){
trialData = trialHPData
}else{
trialData = trialLPData
}
# generate arguments for later analysis
tMax = tMaxs[cIdx]
kmGrid = seq(0, tMax, by=0.1)
# initialize outputs
totalEarnings = vector(length = nComb)
AUC = vector(length = nComb)
# loop over combIdx
for(combIdx in 1 : nComb){
# select data
thisTrialData = trialData[[combIdx]]
realPara = realParas[combIdx,]
# generate arguments for later analysis
label = sprintf('%s %s', conditions[cIdx], paste0(paraNames, realPara, collapse = " "))
# summarise totalEarnings
totalEarnings[combIdx] =  sum(thisTrialData$trialEarnings)
# plot trial-by-trial data
if (plotTrialwiseData) {
trialPlots(thisTrialData,label)
}
# survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
AUC[combIdx] = kmscResults[['auc']]
# WTW time series
wtwCeiling = tMax
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
}
# organize and save blockData
blockData = data.frame(id = 1 : combIdx, blockNum = rep(1, nComb),
condition = factor(rep(cond, each = nComb), levels = c("HP", "LP")),
AUC = AUC,
totalEarnings = totalEarnings)
if(cIdx == 1){
blockHPData = blockData
}else{
blockLPData = blockData
}
}
blockData = data.frame(rbind(blockHPData, blockLPData), rbind(realParas))
colnames(blockData)[(ncol(blockData) - nPara + 1) : ncol(blockData) ] = paraNames
View(blockData)
thisTrialData = trialHPData[[1]]
View(thisTrialData)
thisTrialData$timeWaited
sum(thisTrialData$trialEarnings)
