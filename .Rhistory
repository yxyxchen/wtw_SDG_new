trialData = trialLPData
}
# generate arguments for later analysis
tMax = tMaxs[cIdx]
kmGrid = seq(0, tMax, by=0.1)
# initialize outputs
totalEarnings = vector(length = nComb)
AUC = vector(length = nComb)
# loop over combIdx
for(combIdx in 1 : nComb){
# select data
thisTrialData = trialData[[combIdx]]
realPara = realParas[combIdx,]
# generate arguments for later analysis
label = sprintf('%s %s', conditions[cIdx], paste0(paraNames, realPara, collapse = " "))
# summarise totalEarnings
totalEarnings[combIdx] =  sum(thisTrialData$trialEarnings)
# plot trial-by-trial data
if (plotTrialwiseData) {
trialPlots(thisTrialData,label)
}
# survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
AUC[combIdx] = kmscResults[['auc']]
# WTW time series
wtwCeiling = tMax
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
}
# organize and save blockData
blockData = data.frame(id = 1 : combIdx, blockNum = rep(1, nComb),
condition = factor(rep(cond, each = nComb), levels = c("HP", "LP")),
AUC = AUC,
totalEarnings = totalEarnings)
if(cIdx == 1){
blockHPData = blockData
}else{
blockLPData = blockData
}
}
blockData = data.frame(rbind(blockHPData, blockLPData), rbind(realParas))
colnames(blockData)[(ncol(blockData) - nPara + 1) : ncol(blockData) ] = paraNames
View(blockData)
thisTrialData = trialHPData[[1]]
View(thisTrialData)
thisTrialData$timeWaited
sum(thisTrialData$trialEarnings)
source('~/Documents/first_kick/wtw_SDG_new/subFxs/simulationFxs.R')
source('~/Documents/first_kick/wtw_SDG_new/subFxs/simulationFxs.R')
getModelFun("monteRatio")
getModelFun("monteRatio")
source('~/Documents/first_kick/wtw_SDG_new/subFxs/simulationFxs.R')
getModelFun("monteRatio")
modelName = "monteRP"
pars = c("phiR", "phiP", "tau", "gamma")
dir.create("genData")
dir.create("genData/expModelFitting")
dir.create("genData/expModelFitting/monteRP")
#  load libraries and set environments
options(warn=-1, message =-1) # default settings borrowed somewhere
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan') #load libraries
Sys.setenv(USE_CXX14=1) # making rstan working on this device
rstan_options(auto_write = TRUE) # default settings borrowed somewhere
options(mc.cores = parallel::detectCores())# enable multi-core precessors
library("loo")
# source scripts
source('subFxs/modelFittingFxs.R') # for fitting single case
source('subFxs/wtwSettings.R')
source('subFxs/loadFxs.R') # for load data
# compile the stan model
dir.create(sprintf("genData/expModelFitting/%s", modelName))
model = stan_model(file = sprintf("%s.stan", modelName))
# compile the stan model
dir.create(sprintf("genData/expModelFitting/%s", modelName))
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
# compile the stan model
dir.create(sprintf("genData/expModelFitting/%s", modelName))
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
# compile the stan model
dir.create(sprintf("genData/expModelFitting/%s", modelName))
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
trialData = trialData[(1 : length(trialData)) %in% allIDs]
timeWaitedList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$timeWaited[1 : sum(tempt$blockNum == 1)]
})
trialEarningsList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$trialEarnings[1 : sum(tempt$blockNum == 1)]
})
scheduledWaitList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$scheduledWait[1 : sum(tempt$blockNum == 1)]
})
condList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = unique(tempt$condition)
})
wIniList = ifelse(condList == "HP", wInis[1], wInis[2])
timeWaitedList = sapply(1:n, function(sIdx){
ifelse(trialEarningsList[[sIdx]] > 0, scheduledWaitList[[sIdx]], timeWaitedList[[sIdx]])
})
# loop over suvject
for(sIdx in 1 : n){
wIni = wIniList[[sIdx]]
cond = condList[[sIdx]]
trialEarnings= trialEarningsList[[sIdx]]
timeWaited = timeWaitedList[[sIdx]]
fileName = sprintf("genData/expModelFitting/%s/s%d", modelName, sIdx)
modelFitting(cond, wIni, timeWaited, trialEarnings, fileName, pars, model)
}
expModelFitting("monteRP", pars)
source('~/Documents/first_kick/wtw_SDG_new/expModelFitting.R')
expModelFitting("monteRP", pars)
pars
#  load libraries and set environments
options(warn=-1, message =-1) # default settings borrowed somewhere
library('plyr'); library(dplyr); library(ggplot2);library('tidyr');library('rstan') #load libraries
Sys.setenv(USE_CXX14=1) # making rstan working on this device
rstan_options(auto_write = TRUE) # default settings borrowed somewhere
options(mc.cores = parallel::detectCores())# enable multi-core precessors
library("loo")
# source scripts
source('subFxs/modelFittingFxs.R') # for fitting single case
source('subFxs/wtwSettings.R')
source('subFxs/loadFxs.R') # for load data
# compile the stan model
dir.create(sprintf("genData/expModelFitting/%s", modelName))
model = stan_model(file = sprintf("stanModels/%s.stan", modelName))
# load expData
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
trialData = trialData[(1 : length(trialData)) %in% allIDs]
timeWaitedList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$timeWaited[1 : sum(tempt$blockNum == 1)]
})
trialEarningsList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$trialEarnings[1 : sum(tempt$blockNum == 1)]
})
scheduledWaitList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = tempt$scheduledWait[1 : sum(tempt$blockNum == 1)]
})
condList = sapply(1 :n, function(sIdx) {
tempt = trialData[[sIdx]]
junk = unique(tempt$condition)
})
wIniList = ifelse(condList == "HP", wInis[1], wInis[2])
timeWaitedList = sapply(1:n, function(sIdx){
ifelse(trialEarningsList[[sIdx]] > 0, scheduledWaitList[[sIdx]], timeWaitedList[[sIdx]])
})
# loop over suvject
for(sIdx in 1 : n){
wIni = wIniList[[sIdx]]
cond = condList[[sIdx]]
trialEarnings= trialEarningsList[[sIdx]]
timeWaited = timeWaitedList[[sIdx]]
fileName = sprintf("genData/expModelFitting/%s/s%d", modelName, sIdx)
modelFitting(cond, wIni, timeWaited, trialEarnings, fileName, pars, model)
}
library("R.matlab")
n = 120
nModel = 2
modelNames = c("monte", "monteBias")
waicList = matrix(NA, n, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
waic = vector(length = n)
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.RData", modelName, sIdx)
load(fileName)
waic[sIdx] = WAIC$waic
}
waicList[,m] = waic
}
f= "genData/expModelFitting/waicList.mat"
writeMat(f, waicList = waicList)
# this script extract waic for all models.
library("R.matlab")
n = 120
nModel = 2
modelNames = c("monte", "monteRP")
waicList = matrix(NA, n, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
waic = vector(length = n)
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.RData", modelName, sIdx)
load(fileName)
waic[sIdx] = WAIC$waic
}
waicList[,m] = waic
}
f= "genData/expModelFitting/waicList.mat"
writeMat(f, waicList = waicList)
fileName
# this script extract waic for all models.
library("R.matlab")
n = 120
nModel = 2
modelNames = c("monte", "monteRP")
waicList = matrix(NA, n, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
waic = vector(length = n)
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.RData", modelName, sIdx)
load(fileName)
waic[sIdx] = WAIC$waic
}
waicList[,m] = waic
}
f= "genData/expModelFitting/waicList.mat"
writeMat(f, waicList = waicList)
# this script extract waic for all models.
library("R.matlab")
n = 120
nModel = 2
modelNames = c("monte", "monteRP")
waicList = matrix(NA, n, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
waic = vector(length = n)
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.RData", modelName, sIdx)
load(fileName)
waic[sIdx] = WAIC$waic
}
waicList[,m] = waic
}
f= "genData/expModelFitting/waicList.mat"
writeMat(f, waicList = waicList)
# this script extract waic for all models.
library("R.matlab")
n = 120
nModel = 2
modelNames = c("monte", "monteRP")
waicList = matrix(NA, n, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
waic = vector(length = n)
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.RData", modelName, sIdx)
load(fileName)
waic[sIdx] = WAIC$waic
}
waicList[,m] = waic
}
f= "genData/expModelFitting/waicList.mat"
writeMat(f, waicList = waicList)
# this script extract waic for all models.
library("R.matlab")
n = 120
nModel = 2
modelNames = c("monte", "monteRP")
waicList = matrix(NA, n, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
waic = vector(length = n)
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.RData", modelName, sIdx)
load(fileName)
waic[sIdx] = WAIC$waic
}
waicList[,m] = waic
}
f= "genData/expModelFitting/waicList.mat"
writeMat(f, waicList = waicList)
# this script extract waic for all models.
library("R.matlab")
n = 120
nModel = 2
modelNames = c("monte", "monteRP")
waicList = matrix(NA, n, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
waic = vector(length = n)
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.RData", modelName, sIdx)
load(fileName)
waic[sIdx] = WAIC$waic
}
waicList[,m] = waic
}
f= "genData/expModelFitting/waicList.mat"
writeMat(f, waicList = waicList)
# this script extract waic for all models.
library("R.matlab")
n = 120
nModel = 2
modelNames = c("monte", "monteRP")
waicList = matrix(NA, n, nModel)
for(m in 1 : nModel){
modelName = modelNames[m]
waic = vector(length = n)
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.RData", modelName, sIdx)
load(fileName)
waic[sIdx] = WAIC$waic
}
waicList[,m] = waic
}
f= "genData/expModelFitting/waicList.mat"
writeMat(f, waicList = waicList)
waicList
n = 120
modelName = "monteRP"
sIdx = 1
fileName = sprintf("genData/expModelFitting/%s/s%d.txt", modelName, sIdx)
trialData[[sIdx]] = read.csv(fileName)
trialData = vector("list", length = n)
fileName = sprintf("genData/expModelFitting/%s/s%d.txt", modelName, sIdx)
trialData[[sIdx]] = read.csv(fileName)
trialData[[sIdx]]
a =  trialData[[sIdx]]
View(a)
mean(trialData[[sIdx]])
apply(trialData[[sIdx]], MARGIN = 1, mean)
apply(trialData[[sIdx]], MARGIN = 2, mean)
n = 120
modelName = "monteRP"
samplePara = vector("list", length = n)
summaryPara = matrix(NA, n, 5)
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.txt", modelName, sIdx)
samplePara[[sIdx]] = read.csv(fileName)
summaryPara[sIdx, ] = apply(trialData[[sIdx]], MARGIN = 2, mean)
}
summaryPara[sIdx, ] = apply(trialData[[sIdx]], MARGIN = 2, mean)
summaryPara = data.frame(NA, n, 5)
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.txt", modelName, sIdx)
samplePara[[sIdx]] = read.csv(fileName)
summaryPara[sIdx, ] = apply(trialData[[sIdx]], MARGIN = 2, mean)
}
summaryPara[sIdx, ]
apply(trialData[[sIdx]], MARGIN = 2, mean)
apply(trialData[[sIdx]], MARGIN = 2, mean)
fileName = sprintf("genData/expModelFitting/%s/s%d.txt", modelName, sIdx)
samplePara[[sIdx]] = read.csv(fileName)
trialData[[sIdx]]
sIdx
fileName = sprintf("genData/expModelFitting/%s/s%d.txt", modelName, sIdx)
samplePara[[sIdx]] = read.csv(fileName)
samplePara[[sIdx]]
n = 120
modelName = "monteRP"
samplePara = vector("list", length = n)
summaryPara = data.frame("phiR" = vector(n), "phiP" = vector(n),
"tau" = vector(n), "gamma" = vector(n))
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.txt", modelName, sIdx)
samplePara[[sIdx]] = read.csv(fileName)
summaryPara[sIdx, ] = apply(samplePara[[sIdx]] , MARGIN = 2, mean)
}
summaryPara = data.frame("phiR" = vector(n), "phiP" = vector(n),
"tau" = vector(n), "gamma" = vector(n))
summaryPara = data.frame("phiR" = vector(NA,n), "phiP" = vector(NA,n),
"tau" = vector(NA,n), "gamma" = vector(NA,n))
summaryPara = data.frame("phiR" = vector(length = n), "phiP" = vector(length = n),
"tau" = vector(length = n), "gamma" = vector(length = n))
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.txt", modelName, sIdx)
samplePara[[sIdx]] = read.csv(fileName)
summaryPara[sIdx, ] = apply(samplePara[[sIdx]] , MARGIN = 2, mean)
}
warnings()
View(summaryPara)
apply(samplePara[[sIdx]] , MARGIN = 2, mean)
summaryPara[sIdx, ] = apply(samplePara[[sIdx]] , MARGIN = 2, mean)
samplePara = vector("list", length = n)
summaryPara = data.frame("phiR" = vector(length = n), "phiP" = vector(length = n),
"tau" = vector(length = n), "gamma" = vector(length = n),
"LL_all" = vector(length = n))
for(sIdx in 1 : n){
fileName = sprintf("genData/expModelFitting/%s/s%d.txt", modelName, sIdx)
samplePara[[sIdx]] = read.csv(fileName)
summaryPara[sIdx, ] = apply(samplePara[[sIdx]] , MARGIN = 2, mean)
}
hist(summaryPara$phiR)
hist(summaryPara$phiR)
hist(summaryPara$phiP)
library(ggplot2)
ggplot(summaryPara, aes(phiR, phiP)) + geom_point()
ggplot(summaryPara, aes(phiR, phiP)) + geom_point() + xlim(c(0,0.7)) +
ylim(c(0, 0.7)) + geom_abline(slope = 1, yintercept = 0)
library(ggplot2)
ggplot(summaryPara, aes(phiR, phiP)) + geom_point() + xlim(c(0,0.2)) +
ylim(c(0, 0.2)) + geom_abline(slope = 1, yintercept = 0)
load('genData/expDataAnalysis/blockData.RData')
dir.create("genData/expDataAnalysis")
# load libraries
source('subFxs/loadFxs.R') # for loading data
source('subFxs/analysisFxs.R') # for analysis
source("subFxs/plotThemes.R")
library("ggplot2")
library('dplyr')
# library(Hmisc)
# load setting parameters
load("wtwSettings.RData")
# load all data
allData = loadAllData()
hdrData = allData$hdrData
trialData = allData$trialData
# list with a named element for each subject ID.
allIDs = hdrData$ID                   # column of subject IDs
n = length(allIDs)                    # n
nBlock = 3
cat('Analyzing data for n','=',n,'subjects.\n')
# control which individual-level plots to generate
plotTrialwiseData = F
plotKMSC = F
plotWTW = F
plotTimeEarnings = F   # no good effect
plotTrialEarnings =  F  # no good effect
# initialize outputs, organised by block
tGrid = seq(0, blockSecs, by = 0.1)
AUC = numeric(length =n * nBlock)
totalEarnings =  numeric(length =n * nBlock)
# descriptive statistics for individual subjects and blocks
for (sIdx in 1:n) {
thisID = allIDs[sIdx]
for (bkIdx in 1:nBlock){
# select data
thisTrialData = trialData[[thisID]]
thisBlockIdx = (thisTrialData$blockNum == bkIdx)
thisTrialData = thisTrialData[thisBlockIdx,]
# generate arguments for later analysis
label = sprintf('Subject %s, Cond %s, Stress %s)',thisID, hdrData$condition[sIdx], hdrData$stress[sIdx])
noIdx = (sIdx - 1) * nBlock + bkIdx #
tMax = ifelse(hdrData$condition[sIdx] == conditions[1], tMaxs[1], tMaxs[2])
kmGrid = seq(0, tMax, by=0.1) # grid on which to average survival curves.
# calcualte totalEarnings
totalEarnings[noIdx] =  sum(thisTrialData$trialEarnings)
# plot trial-by-trial data
if (plotTrialwiseData) {
trialPlots(thisTrialData,label)
}
# survival analysis
kmscResults = kmsc(thisTrialData,tMax,label,plotKMSC,kmGrid)
AUC[noIdx] = kmscResults[['auc']]
# WTW time series
wtwCeiling = tMax
wtwtsResults = wtwTS(thisTrialData, tGrid, wtwCeiling, label, plotWTW)
# accumutative timeEarnings
timeEarnings = getTimeEarnings(thisTrialData, tGrid, label, plotTimeEarnings)
# accumutative trialEarnings
plotData = data.frame(trialNum = thisTrialData$trialNum,
cumEarnings = cumsum(thisTrialData$trialEarnings))
if(plotTrialEarnings){
p = ggplot(plotData, aes(trialNum, cumEarnings)) + geom_line()
print(p)
}
# wait for input before continuing, if individual plots were requested
if (any(plotTrialwiseData, plotKMSC, plotWTW, plotTimeEarnings, plotTrialEarnings)) {
readline(prompt = paste('subject',thisID, "block", bkIdx, '(hit ENTER to continue)'))
graphics.off()
}
} # loop over blocks
}
# organize and save blockWiseData
blockData = data.frame(id = rep(allIDs, each = nBlock), blockNum = rep( t(1 : nBlock), n),
cbal = rep(hdrData$cbal, each = nBlock), condition = factor(rep(hdrData$condition, each = nBlock), levels = c("HP", "LP")),
stress = factor(rep(hdrData$stress, each = nBlock), levels = c("no stress", "stress")), AUC = AUC,
totalEarnings = totalEarnings)
save(blockData, file = 'genData/expDataAnalysis/blockData.RData')
plotData = cbind(summaryPara, blockData[blockData$blockNum == 1])
plotData = cbind(summaryPara, blockData[blockData$blockNum == 1, ])
summaryPara$optimism = summaryPara$phiR - summaryPara$phiP
ggplot(plotData, aes(optimism, AUC)) + geom_point() + facet_grid(~condition)
plotData = cbind(summaryPara, blockData[blockData$blockNum == 1, ])
ggplot(plotData, aes(optimism, AUC)) + geom_point() + facet_grid(~condition)
plotData = cbind(summaryPara, blockData[blockData$blockNum == 2, ])
ggplot(plotData, aes(optimism, AUC)) + geom_point() + facet_grid(~condition)
plotData = cbind(summaryPara, blockData[blockData$blockNum == 3, ])
ggplot(plotData, aes(optimism, AUC)) + geom_point() + facet_grid(~condition)
plotData = cbind(summaryPara, blockData[blockData$blockNum == 1, ])
ggplot(plotData, aes(optimism, AUC)) + geom_point() + facet_grid(~condition)
### relation ship between AUC and
plotData = cbind(summaryPara, blockData[blockData$blockNum == 2, ])
ggplot(plotData, aes(optimism, AUC)) + geom_point() + facet_grid(~condition)
### relation ship between AUC and
plotData = cbind(summaryPara, blockData[blockData$blockNum == 3, ])
ggplot(plotData, aes(optimism, AUC)) + geom_point() + facet_grid(~condition)
cor.test(plotData$optimism, plotData$AUC)
hist(summaryPara$optimism)
t.test(plotData$optimism[plotData$stress == "stress"],
plotData$optimism[plotData$stress == "no stress"],)
plotData$stress
plotData$optimism[plotData$stress == "no stress"]
t.test(plotData$optimism[plotData$stress == "stress"],
plotData$optimism[plotData$stress == "no stress"])
t.test(plotData$tau[plotData$stress == "stress"],
plotData$tau[plotData$stress == "no stress"])
t.test(plotData$gamma[plotData$stress == "stress"],
plotData$gamma[plotData$stress == "no stress"])
t.test(plotData$phiR[plotData$stress == "stress"],
plotData$phiR[plotData$stress == "no stress"])
t.test(plotData$phiP[plotData$stress == "stress"],
plotData$phiP[plotData$stress == "no stress"])
